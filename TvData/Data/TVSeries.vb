'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System.Xml.Serialization
Imports System.Collections.ObjectModel
Imports System.IO
Imports System.ComponentModel

'
'This source code was auto-generated by xsd, Version=4.0.30319.1.
'

'System.Diagnostics.DebuggerStepThroughAttribute(),

<CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"),
 Serializable(),
 DesignerCategory("code"),
 XmlType(AnonymousType:=True),
 XmlRoot(ElementName:="Data", [Namespace]:="", IsNullable:=False)>
Partial Public Class TVSeries
    Inherits Object
    Implements INotifyPropertyChanged

    Public Delegate Sub AddEpisodeDelegate(EpisodeCollection As ObservableCollection(Of Episode), TheEpisode As Episode)
    Public Shared Sub AddEpisode(EpisodeCollection As ObservableCollection(Of Episode), TheEpisode As Episode)
        EpisodeCollection.Add(TheEpisode)
    End Sub

    Private WithEvents seriesInfoField As Series
    <XmlElement("Series", GetType(Series), Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property SeriesInfo As Series
        Get
            Return Me.seriesInfoField
        End Get
        Set(value As Series)
            Me.seriesInfoField = value
            RaisePropertyChanged("SeriesInfo")
        End Set
    End Property

    Private Sub SeriesInfoChanged() Handles seriesInfoField.PropertyChanged
        RaisePropertyChanged("SeriesInfo")
    End Sub

    Private WithEvents episodesField As TrulyObservableCollection(Of Episode)
    <XmlElement("Episode", GetType(Episode), Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Episodes As TrulyObservableCollection(Of Episode)
        Get
            Return episodesField
        End Get
        Set(value As TrulyObservableCollection(Of Episode))
            episodesField = value
            RaisePropertyChanged("Episodes")
        End Set
    End Property

    Private Sub EpisodesItemPropertyChanged(sender As Object, e As PropertyChangedEventArgs) Handles episodesField.ItemPropertyChanged
        SetEpisodeSelected((From ep In Episodes Where ep.IsSelected = True).Count > 0)
    End Sub

    Private IsEpisodeSelectedField As Boolean = False
    <XmlIgnore()>
    Public ReadOnly Property IsEpisodeSelected As Boolean
        Get
            Return IsEpisodeSelectedField
        End Get
    End Property

    Private Sub SetEpisodeSelected(IsSelected As Boolean)
        IsEpisodeSelectedField = IsSelected
        RaisePropertyChanged("IsEpisodeSelected")
    End Sub

    'Private Sub EpisodesChanged(sender As Object, e As Specialized.NotifyCollectionChangedEventArgs) Handles episodesField.ListChanged
    '    RaisePropertyChanged("Episodes")
    'End Sub

    'Private Sub episodesField_ListChanged(sender As Object, e As ListChangedEventArgs) Handles episodesField.ListChanged
    '    If e.PropertyDescriptor IsNot Nothing AndAlso e.PropertyDescriptor.DisplayName = "IsSelected" Then

    '    End If
    '    'RaisePropertyChanged("Episodes")
    'End Sub

    Private fileNameField As String
    <XmlAttribute("FileName")>
    Property FileName As String
        Get
            Return fileNameField
        End Get
        Set(value As String)
            fileNameField = value
            RaisePropertyChanged("FileName")
        End Set
    End Property

#Region " INotifyPropertyChanged Members "

    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
        If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub

#End Region

    Public Shadows ReadOnly Property ToString() As String
        Get
            Using sw As New StringWriter()
                Dim x As New XmlSerializer(Me.GetType)
                x.Serialize(sw, Me)
                Return sw.ToString()
            End Using
        End Get
    End Property

    Public Sub New()
        Episodes = New TrulyObservableCollection(Of Episode)
        SeriesInfo = New Series()
    End Sub

End Class

'System.Diagnostics.DebuggerStepThroughAttribute(), _
<CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"),
 Serializable(),
 DesignerCategory("code"),
 XmlType(AnonymousType:=True)>
Partial Public Class Episode
    Inherits Object
    Implements INotifyPropertyChanged
    Implements INotifyDataErrorInfo

    ' Indexer property
    Default Public Property Item(propertyName As String) As Object
        Get
            ' probably faster without reflection:
            ' like:  return Properties.Settings.Default.PropertyValues[propertyName] 
            ' instead of the following
            Dim myPropInfo As Reflection.PropertyInfo = GetType(Episode).GetProperty(propertyName)
            Return myPropInfo.GetValue(Me, Nothing)
        End Get
        Set
            Dim myType As Type = GetType(Episode)
            Dim myPropInfo As Reflection.PropertyInfo = myType.GetProperty(propertyName)

            myPropInfo.SetValue(Me, Value, Nothing)
        End Set
    End Property

#Region " Fields "

    Private idField As String

    'Private combined_episodenumberField As String

    'Private combined_seasonField As String

    'Private dVD_chapterField As String

    'Private dVD_discidField As String

    'Private dVD_episodenumberField As String

    'Private dVD_seasonField As String

    'Private directorField As String

    'Private epImgFlagField As String

    Private episodeNameField As String

    Private episodeNumberField As Short

    'Private episodeNumberFieldSpecified As Boolean

    Private firstAiredField As String

    'Private guestStarsField As String

    Private iMDB_IDField As String

    Private languageField As String

    Private overviewField As String

    Private productionCodeField As String

    'Private ratingField As String

    'Private ratingCountField As String

    Private seasonNumberField As Short

    'Private seasonNumberFieldSpecified As Boolean

    'Private writerField As String

    'Private absolute_numberField As String

    'Private airsafter_seasonField As String

    'Private airsbefore_episodeField As String

    'Private airsbefore_seasonField As String

    'Private filenameField As String

    'Private lastupdatedField As String

    'Private seasonidField As String

    'Private seriesidField As String

    'Private thumb_addedField As String

    'Private thumb_heightField As String

    'Private thumb_widthField As String

    Private iMDB_ImdbIdField As String

    Private iMDB_AiredDateField As String

    Private iMDB_PlotField As String

    Private iMDB_EpisodeNameField As String

    Private tMDB_ImdbIdField As String

    Private tMDB_AiredDateField As String

    Private tMDB_OverviewField As String

    Private tMDB_EpisodeNameField As String

    Private tMDB_ProductionCodeField As String

    Private tvguide_AiredDateField As String

    Private tvguide_OverviewField As String

    Private tvguide_EpisodeNameField As String

    Private isSelectedField As Boolean

    Private tvRageIdField As String

    Dim freebaseIdField As String

    Private freebaseMidField As String


    Private TvRage_AiredDateField As String

    Private TvRage_PlotField As String

    Private TvRage_EpisodeNameField As String


    Private Freebase_AiredDateField As String

    Private Freebase_OverviewField As String

    Private Freebase_EpisodeNameField As String


    Private Alternative_AiredDateField As String

    Private Alternative_OverviewField As String

    Private Alternative_EpisodeNameField As String

#End Region

#Region " Properties "

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property id() As String
        Get
            Return idField
        End Get
        Set(value As String)
            idField = value
            RaisePropertyChanged("id")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Combined_episodenumber() As String
    '    Get
    '        Return Me.combined_episodenumberField
    '    End Get
    '    Set(value As String)
    '        Me.combined_episodenumberField = value
    '        RaisePropertyChanged("Combined_episodenumber")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Combined_season() As String
    '    Get
    '        Return Me.combined_seasonField
    '    End Get
    '    Set(value As String)
    '        Me.combined_seasonField = value
    '        RaisePropertyChanged("Combined_season")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property DVD_chapter() As String
    '    Get
    '        Return Me.dVD_chapterField
    '    End Get
    '    Set(value As String)
    '        Me.dVD_chapterField = value
    '        RaisePropertyChanged("DVD_chapter")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property DVD_discid() As String
    '    Get
    '        Return Me.dVD_discidField
    '    End Get
    '    Set(value As String)
    '        Me.dVD_discidField = value
    '        RaisePropertyChanged("DVD_discid")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property DVD_episodenumber() As String
    '    Get
    '        Return Me.dVD_episodenumberField
    '    End Get
    '    Set(value As String)
    '        Me.dVD_episodenumberField = value
    '        RaisePropertyChanged("DVD_episodenumber")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property DVD_season() As String
    '    Get
    '        Return Me.dVD_seasonField
    '    End Get
    '    Set(value As String)
    '        Me.dVD_seasonField = value
    '        RaisePropertyChanged("DVD_season")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Director() As String
    '    Get
    '        Return Me.directorField
    '    End Get
    '    Set(value As String)
    '        Me.directorField = value
    '        RaisePropertyChanged("Director")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property EpImgFlag() As String
    '    Get
    '        Return Me.epImgFlagField
    '    End Get
    '    Set(value As String)
    '        Me.epImgFlagField = value
    '        RaisePropertyChanged("EpImgFlag")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Episode Name")>
    Public Property EpisodeName() As String
        Get
            Return episodeNameField
        End Get
        Set(value As String)
            If value IsNot Nothing Then
                episodeNameField = value.Trim()
            Else
                episodeNameField = value
            End If
            RaisePropertyChanged("EpisodeName")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property EpisodeNumber() As Short
        Get
            Return episodeNumberField
        End Get
        Set(value As Short)
            episodeNumberField = value
            RaisePropertyChanged("EpisodeNumber")
        End Set
    End Property

    '<System.Xml.Serialization.XmlIgnoreAttribute()> _
    'Public Property EpisodeNumberSpecified() As Boolean
    '    Get
    '        Return Me.episodeNumberFieldSpecified
    '    End Get
    '    Set(value As Boolean)
    '        Me.episodeNumberFieldSpecified = value
    '        RaisePropertyChanged("EpisodeNumberSpecified")
    '    End Set
    'End Property

    <XmlElementAttribute(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("First Aired")>
    Public Property FirstAired() As String
        Get
            Return firstAiredField
        End Get
        Set(value As String)
            firstAiredField = value
            RaisePropertyChanged("FirstAired")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property GuestStars() As String
    '    Get
    '        Return Me.guestStarsField
    '    End Get
    '    Set(value As String)
    '        Me.guestStarsField = value
    '        RaisePropertyChanged("GuestStars")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property IMDB_ID() As String
        Get
            Return iMDB_IDField
        End Get
        Set(value As String)
            iMDB_IDField = value
            RaisePropertyChanged("IMDB_ID")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Language() As String
        Get
            Return languageField
        End Get
        Set(value As String)
            languageField = value
            RaisePropertyChanged("Language")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Overview")>
    Public Property Overview() As String
        Get
            Return overviewField
        End Get
        Set(value As String)
            If value IsNot Nothing Then
                overviewField = value.Trim()
            Else
                overviewField = value
            End If
            RaisePropertyChanged("Overview")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Production Code")>
    Public Property ProductionCode() As String
        Get
            Return productionCodeField
        End Get
        Set(value As String)
            productionCodeField = value
            RaisePropertyChanged("ProductionCode")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Rating() As String
    '    Get
    '        Return Me.ratingField
    '    End Get
    '    Set(value As String)
    '        Me.ratingField = value
    '        RaisePropertyChanged("Rating")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property RatingCount() As String
    '    Get
    '        Return Me.ratingCountField
    '    End Get
    '    Set(value As String)
    '        Me.ratingCountField = value
    '        RaisePropertyChanged("RatingCount")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property SeasonNumber() As Short
        Get
            Return Me.seasonNumberField
        End Get
        Set(value As Short)
            Me.seasonNumberField = value
            RaisePropertyChanged("SeasonNumber")
        End Set
    End Property

    '<System.Xml.Serialization.XmlIgnoreAttribute()> _
    'Public Property SeasonNumberSpecified() As Boolean
    '    Get
    '        Return Me.seasonNumberFieldSpecified
    '    End Get
    '    Set(value As Boolean)
    '        Me.seasonNumberFieldSpecified = value
    '        RaisePropertyChanged("SeasonNumberSpecified")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Writer() As String
    '    Get
    '        Return Me.writerField
    '    End Get
    '    Set(value As String)
    '        Me.writerField = value
    '        RaisePropertyChanged("Writer")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property absolute_number() As String
    '    Get
    '        Return Me.absolute_numberField
    '    End Get
    '    Set(value As String)
    '        Me.absolute_numberField = value
    '        RaisePropertyChanged("absolute_number")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property airsafter_season() As String
    '    Get
    '        Return Me.airsafter_seasonField
    '    End Get
    '    Set(value As String)
    '        Me.airsafter_seasonField = value
    '        RaisePropertyChanged("airsafter_season")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property airsbefore_episode() As String
    '    Get
    '        Return Me.airsbefore_episodeField
    '    End Get
    '    Set(value As String)
    '        Me.airsbefore_episodeField = value
    '        RaisePropertyChanged("airsbefore_episode")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property airsbefore_season() As String
    '    Get
    '        Return Me.airsbefore_seasonField
    '    End Get
    '    Set(value As String)
    '        Me.airsbefore_seasonField = value
    '        RaisePropertyChanged("airsbefore_season")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property filename() As String
    '    Get
    '        Return Me.filenameField
    '    End Get
    '    Set(value As String)
    '        Me.filenameField = value
    '        RaisePropertyChanged("filename")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property lastupdated() As String
    '    Get
    '        Return Me.lastupdatedField
    '    End Get
    '    Set(value As String)
    '        Me.lastupdatedField = value
    '        RaisePropertyChanged("lastupdated")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property seasonid() As String
    '    Get
    '        Return Me.seasonidField
    '    End Get
    '    Set(value As String)
    '        Me.seasonidField = value
    '        RaisePropertyChanged("seasonid")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property seriesid() As String
    '    Get
    '        Return Me.seriesidField
    '    End Get
    '    Set(value As String)
    '        Me.seriesidField = value
    '        RaisePropertyChanged("seriesid")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property thumb_added() As String
    '    Get
    '        Return Me.thumb_addedField
    '    End Get
    '    Set(value As String)
    '        Me.thumb_addedField = value
    '        RaisePropertyChanged("thumb_added")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property thumb_height() As String
    '    Get
    '        Return Me.thumb_heightField
    '    End Get
    '    Set(value As String)
    '        Me.thumb_heightField = value
    '        RaisePropertyChanged("thumb_height")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property thumb_width() As String
    '    Get
    '        Return Me.thumb_widthField
    '    End Get
    '    Set(value As String)
    '        Me.thumb_widthField = value
    '        RaisePropertyChanged("thumb_width")
    '    End Set
    'End Property

    ''IMDB
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property IMDB_ImdbId() As String
        Get
            Return iMDB_ImdbIdField
        End Get
        Set(value As String)
            iMDB_ImdbIdField = value
            RaisePropertyChanged("IMDB_ImdbId")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property IMDB_AiredDate() As String
        Get
            Return iMDB_AiredDateField
        End Get
        Set(value As String)
            iMDB_AiredDateField = value
            RaisePropertyChanged("IMDB_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("IMDb Plot")>
    Public Property IMDB_Plot() As String
        Get
            Return iMDB_PlotField
        End Get
        Set(value As String)
            If value IsNot Nothing Then
                value = value.Trim()
            End If
            iMDB_PlotField = value
            RaisePropertyChanged("IMDB_Plot")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("IMDb Episode Name")>
    Public Property IMDB_EpisodeName() As String
        Get
            Return Me.iMDB_EpisodeNameField
        End Get
        Set(value As String)
            If value IsNot Nothing Then
                value = value.Trim()
            End If
            Me.iMDB_EpisodeNameField = value
            RaisePropertyChanged("IMDB_EpisodeName")
        End Set
    End Property


    ''TMDb
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TMDB_ImdbId() As String
        Get
            Return Me.tMDB_ImdbIdField
        End Get
        Set(value As String)
            Me.tMDB_ImdbIdField = value
            RaisePropertyChanged("TMDB_ImdbId")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TMDB_AiredDate() As String
        Get
            Return Me.tMDB_AiredDateField
        End Get
        Set(value As String)
            Me.tMDB_AiredDateField = value
            RaisePropertyChanged("TMDB_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TMDB_Overview() As String
        Get
            Return tMDB_OverviewField
        End Get
        Set(value As String)
            tMDB_OverviewField = value.Trim()
            RaisePropertyChanged("TMDB_Overview")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("TMDb Episode Name")>
    Public Property TMDB_EpisodeName() As String
        Get
            Return Me.tMDB_EpisodeNameField
        End Get
        Set(value As String)
            Me.tMDB_EpisodeNameField = value.Trim()
            RaisePropertyChanged("TMDB_EpisodeName")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("TMDb Production Code")>
    Public Property TMDB_ProductionCode As String
        Get
            Return tMDB_ProductionCodeField
        End Get
        Set(value As String)
            Me.tMDB_ProductionCodeField = value.Trim()
            RaisePropertyChanged("TMDB_ProductionCode")
        End Set
    End Property

    ''TvGuide
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TvGuide_AiredDate() As String
        Get
            Return Me.tvguide_AiredDateField
        End Get
        Set(value As String)
            Me.tvguide_AiredDateField = value
            RaisePropertyChanged("TvGuide_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("TV Guide Overview")>
    Public Property TvGuide_Overview() As String
        Get
            Return Me.tvguide_OverviewField
        End Get
        Set(value As String)
            Me.tvguide_OverviewField = value.Trim()
            RaisePropertyChanged("TvGuide_Overview")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("TV Guide Episode Name")>
    Public Property TvGuide_EpisodeName() As String
        Get
            Return Me.tvguide_EpisodeNameField
        End Get
        Set(value As String)
            Me.tvguide_EpisodeNameField = value.Trim()
            RaisePropertyChanged("TvGuide_EpisodeName")
        End Set
    End Property

    <System.Xml.Serialization.XmlIgnoreAttribute()>
    Public Property IsSelected As Boolean
        Get
            Return isSelectedField
        End Get
        Set(value As Boolean)
            isSelectedField = value
            RaisePropertyChanged("IsSelected")
        End Set
    End Property

    ''Freebase
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property FreebaseId As String
        Get
            Return freebaseIdField
        End Get
        Set(value As String)
            freebaseIdField = value
            RaisePropertyChanged("FreebaseId")
        End Set
    End Property


    ''TvRage
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property TvRage_EpisodeName As String
        Get
            Return TvRage_EpisodeNameField
        End Get
        Set(value As String)
            TvRage_EpisodeNameField = value.Trim()
            RaisePropertyChanged("TvRage_EpisodeName")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property TvRage_AiredDate As String
        Get
            Return TvRage_AiredDateField
        End Get
        Set(value As String)
            Me.TvRage_AiredDateField = value
            RaisePropertyChanged("TvRage_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property TvRage_Plot As String
        Get
            Return TvRage_PlotField
        End Get
        Set(value As String)
            TvRage_PlotField = value.Trim()
            RaisePropertyChanged("TvRage_Plot")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TvRageId As String
        Get
            Return tvRageIdField
        End Get
        Set(value As String)
            tvRageIdField = value
            RaisePropertyChanged("TvRageId")
        End Set
    End Property

    ''Freebase
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Freebase_AiredDate() As String
        Get
            Return Me.Freebase_AiredDateField
        End Get
        Set(value As String)
            Me.Freebase_AiredDateField = value
            RaisePropertyChanged("Freebase_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Freebase Overview")>
    Public Property Freebase_Overview() As String
        Get
            Return Me.Freebase_OverviewField
        End Get
        Set(value As String)
            If value IsNot Nothing Then
                Me.Freebase_OverviewField = value.Trim()
            Else
                Me.Freebase_OverviewField = value
            End If
            RaisePropertyChanged("Freebase_Overview")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Freebase Episode Name")>
    Public Property Freebase_EpisodeName() As String
        Get
            Return Me.Freebase_EpisodeNameField
        End Get
        Set(value As String)
            Me.Freebase_EpisodeNameField = value.Trim()
            RaisePropertyChanged("Freebase_EpisodeName")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property FreebaseMid As String
        Get
            Return freebaseMidField
        End Get
        Set(value As String)
            freebaseMidField = value.Trim()
            RaisePropertyChanged("FreebaseMid")
        End Set
    End Property

    ''Alternative
    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Alternative_AiredDate() As String
        Get
            Return alternative_AiredDateField
        End Get
        Set(value As String)
            alternative_AiredDateField = value
            RaisePropertyChanged("Alternative_AiredDate")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Alternative_Overview() As String
        Get
            Return Alternative_OverviewField
        End Get
        Set(value As String)
            If Alternative_OverviewField <> value Then
                Alternative_OverviewField = value.Trim()
                RaisePropertyChanged("Alternative_Overview")
            End If
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified),
        DisplayName("Alternative Episode Name")>
    Public Property Alternative_EpisodeName() As String
        Get
            Return Alternative_EpisodeNameField
        End Get
        Set(value As String)
            Alternative_EpisodeNameField = value.Trim()
            RaisePropertyChanged("Alternative_EpisodeName")
        End Set
    End Property

    <XmlIgnore>
    Public ReadOnly Property FirstAiredYear As Integer?
        Get
            Dim dte As Date
            Date.TryParse(FirstAired, dte)
            Return dte.Year
        End Get
    End Property

#End Region

#Region " INotifyPropertyChanged Members "

    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
        If (Not (propertyChanged) Is Nothing) Then
            Validate(propertyName)
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End If
    End Sub

#End Region

#Region " INotifyDataErrorInfo Members "

    Public Event ErrorsChanged(sender As Object, e As ComponentModel.DataErrorsChangedEventArgs) Implements ComponentModel.INotifyDataErrorInfo.ErrorsChanged
    Private _errors As New Dictionary(Of String, List(Of String))()

    Public Function GetErrors(propertyName As String) As IEnumerable Implements ComponentModel.INotifyDataErrorInfo.GetErrors
        If String.IsNullOrEmpty(propertyName) Then
            Return (_errors.Values)
        End If

        EnsurePropertyErrorList(propertyName)
        If propertyName = "FirstAired" AndAlso _errors("FirstAired").Count > 0 Then
            Dim FirstAiredErrorsSb As New Text.StringBuilder("FirstAired Errors: ")
            For Each e In _errors(propertyName)
                FirstAiredErrorsSb.Append(e & "; ")
            Next
            FirstAiredErrorsSb.AppendLine()
            Console.WriteLine(propertyName & " Errors: " & FirstAiredErrorsSb.ToString)
        End If
        Return _errors(propertyName)
    End Function

    Public ReadOnly Property HasErrors As Boolean Implements ComponentModel.INotifyDataErrorInfo.HasErrors
        Get
            Try
                Return (_errors.Where(Function(c) c.Value.Count > 0).Count() > 0)
            Catch ex As Exception
                'swallow
            End Try
            Return Nothing
        End Get
    End Property

    Private Sub NotifyErrorsChanged(propertyName As String)
        RaiseEvent ErrorsChanged(Me, New ComponentModel.DataErrorsChangedEventArgs(propertyName))
    End Sub

    Public Sub ClearError(propertyName As String)
        EnsurePropertyErrorList(propertyName)
        _errors(propertyName).Clear()
        NotifyErrorsChanged(propertyName)
    End Sub

    Public Sub AddError(propertyName As String, [error] As String)
        EnsurePropertyErrorList(propertyName)
        _errors(propertyName).Add([error])
        NotifyErrorsChanged(propertyName)
    End Sub

    Private Sub EnsurePropertyErrorList(propertyName As String)
        If Not _errors.ContainsKey(propertyName) Then
            _errors(propertyName) = New List(Of String)()
        End If
    End Sub

#End Region

    ''' <summary>
    ''' Force the object to validate itself using the assigned business rules.
    ''' </summary>
    ''' <param name="propertyName">Name of the property to validate.</param>
    Public Sub Validate(propertyName As String)
        If String.IsNullOrEmpty(propertyName) Then
            Return
        End If

        'If propertyName = "FirstName" Then
        '    If FirstName = "James" Then
        '        AddErrorForProperty(propertyName, "FirstName can't be James")
        '    Else
        '        ClearErrorFromProperty(propertyName)
        '    End If
        'End If

        Dim errorString As String = String.Empty
        Select Case propertyName
            Case "TMDB_EpisodeName"
                If Not String.IsNullOrWhiteSpace(TMDB_EpisodeName.Trim()) AndAlso Not TMDB_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "IMDB_EpisodeName"
                If Not String.IsNullOrWhiteSpace(IMDB_EpisodeName) AndAlso Not IMDB_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvGuide_EpisodeName"
                If Not String.IsNullOrWhiteSpace(TvGuide_EpisodeName) AndAlso Not TvGuide_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvRage_EpisodeName"
                If Not String.IsNullOrWhiteSpace(TvRage_EpisodeName) AndAlso Not TvRage_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Freebase_EpisodeName"
                If Not String.IsNullOrWhiteSpace(Freebase_EpisodeName) AndAlso Not Freebase_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Alternative_EpisodeName"
                If Not String.IsNullOrWhiteSpace(Alternative_EpisodeName) AndAlso Not Alternative_EpisodeName.Equals(EpisodeName) Then
                    errorString = "Differs from TVDb"
                End If
            Case "EpisodeName"
                If Not String.IsNullOrWhiteSpace(TMDB_EpisodeName) AndAlso Not TMDB_EpisodeName.Equals(EpisodeName) Then
                    AddError("TMDB_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("TMDB_EpisodeName")
                End If
                If Not String.IsNullOrWhiteSpace(IMDB_EpisodeName) AndAlso Not IMDB_EpisodeName.Equals(EpisodeName) Then
                    AddError("IMDB_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("IMDB_EpisodeName")
                End If
                If Not String.IsNullOrWhiteSpace(TvGuide_EpisodeName) AndAlso Not TvGuide_EpisodeName.Equals(EpisodeName) Then
                    AddError("TvGuide_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("TvGuide_EpisodeName")
                End If
                If Not String.IsNullOrWhiteSpace(TvRage_EpisodeName) AndAlso Not TvRage_EpisodeName.Equals(EpisodeName) Then
                    AddError("TvRage_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("TvRage_EpisodeName")
                End If
                If Not String.IsNullOrWhiteSpace(Freebase_EpisodeName) AndAlso Not Freebase_EpisodeName.Equals(EpisodeName) Then
                    AddError("Freebase_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("Freebase_EpisodeName")
                End If
                If Not String.IsNullOrWhiteSpace(Alternative_EpisodeName) AndAlso Not Alternative_EpisodeName.Equals(EpisodeName) Then
                    AddError("Alternative_EpisodeName", "Differs from TVDB")
                Else
                    ClearError("Alternative_EpisodeName")
                End If

            Case "TMDB_AiredDate"
                If Not String.IsNullOrWhiteSpace(TMDB_AiredDate) AndAlso Not TMDB_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "IMDB_AiredDate"
                If Not String.IsNullOrWhiteSpace(IMDB_AiredDate) AndAlso Not IMDB_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvGuide_AiredDate"
                If Not String.IsNullOrWhiteSpace(TvGuide_AiredDate) AndAlso Not TvGuide_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvRage_AiredDate"
                If Not String.IsNullOrWhiteSpace(TvRage_AiredDate) AndAlso Not TvRage_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Freebase_AiredDate"
                If Not String.IsNullOrWhiteSpace(Freebase_AiredDate) AndAlso Not Freebase_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Alternative_AiredDate"
                If Not String.IsNullOrWhiteSpace(Alternative_AiredDate) AndAlso Not Alternative_AiredDate.Equals(FirstAired) Then
                    errorString = "Differs from TVDb"
                End If
            Case "FirstAired"
                If Not String.IsNullOrWhiteSpace(TMDB_AiredDate) AndAlso Not TMDB_AiredDate.Equals(FirstAired) Then
                    AddError("TMDB_AiredDate", "Differs from TVDB")
                Else
                    ClearError("TMDB_AiredDate")
                End If
                If Not String.IsNullOrWhiteSpace(IMDB_AiredDate) AndAlso Not IMDB_AiredDate.Equals(FirstAired) Then
                    AddError("IMDB_AiredDate", "Differs from TVDB")
                Else
                    ClearError("IMDB_AiredDate")
                End If
                If Not String.IsNullOrWhiteSpace(TvGuide_AiredDate) AndAlso Not TvGuide_AiredDate.Equals(FirstAired) Then
                    AddError("TvGuide_AiredDate", "Differs from TVDB")
                Else
                    ClearError("TvGuide_AiredDate")
                End If
                If Not String.IsNullOrWhiteSpace(TvRage_AiredDate) AndAlso Not TvRage_AiredDate.Equals(FirstAired) Then
                    AddError("TvRage_AiredDate", "Differs from TVDB")
                Else
                    ClearError("TvRage_AiredDate")
                End If
                If Not String.IsNullOrWhiteSpace(Freebase_AiredDate) AndAlso Not Freebase_AiredDate.Equals(FirstAired) Then
                    AddError("Freebase_AiredDate", "Differs from TVDB")
                Else
                    ClearError("Freebase_AiredDate")
                End If
                If Not String.IsNullOrWhiteSpace(Alternative_AiredDate) AndAlso Not Alternative_AiredDate.Equals(FirstAired) Then
                    AddError("Alternative_AiredDate", "Differs from TVDB")
                Else
                    ClearError("Alternative_AiredDate")
                End If
            Case "TMDB_Overview"
                If Not String.IsNullOrWhiteSpace(TMDB_Overview) AndAlso Not TMDB_Overview.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "IMDB_Plot"
                If Not String.IsNullOrWhiteSpace(IMDB_Plot) AndAlso Not IMDB_Plot.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvGuide_Overview"
                If Not String.IsNullOrWhiteSpace(TvGuide_Overview) AndAlso Not TvGuide_Overview.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "TvRage_Plot"
                If Not String.IsNullOrWhiteSpace(TvRage_Plot) AndAlso Not TvRage_Plot.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Freebase_Overview"
                If Not String.IsNullOrWhiteSpace(Freebase_Overview) AndAlso Not Freebase_Overview.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Alternative_Overview"
                If Not String.IsNullOrWhiteSpace(Alternative_Overview) AndAlso Not Alternative_Overview.Equals(Overview) Then
                    errorString = "Differs from TVDb"
                End If
            Case "Overview"
                If Not String.IsNullOrWhiteSpace(TMDB_Overview) AndAlso Not TMDB_Overview.Equals(Overview) Then
                    AddError("TMDB_Overview", "Differs from TVDB")
                Else
                    ClearError("TMDB_Overview")
                End If
                If Not String.IsNullOrWhiteSpace(IMDB_Plot) AndAlso Not IMDB_Plot.Equals(Overview) Then
                    AddError("IMDB_Plot", "Differs from TVDB")
                Else
                    ClearError("IMDB_Plot")
                End If
                If Not String.IsNullOrWhiteSpace(TvGuide_Overview) AndAlso Not TvGuide_Overview.Equals(Overview) Then
                    AddError("TvGuide_Overview", "Differs from TVDB")
                Else
                    ClearError("TvGuide_Overview")
                End If
                If Not String.IsNullOrWhiteSpace(TvRage_Plot) AndAlso Not TvRage_Plot.Equals(Overview) Then
                    AddError("TvRage_Plot", "Differs from TVDB")
                Else
                    ClearError("TvRage_Plot")
                End If
                If Not String.IsNullOrWhiteSpace(Freebase_Overview) AndAlso Not Freebase_Overview.Equals(Overview) Then
                    AddError("Freebase_Overview", "Differs from TVDB")
                Else
                    ClearError("Freebase_Overview")
                End If
                If Not String.IsNullOrWhiteSpace(Alternative_Overview) AndAlso Not Alternative_Overview.Equals(Overview) Then
                    AddError("Alternative_Overview", "Differs from TVDB")
                Else
                    ClearError("Alternative_Overview")
                End If

            Case "IMDB_ImdbId"
                If Not String.IsNullOrWhiteSpace(IMDB_ImdbId) AndAlso IMDB_ImdbId <> IMDB_ID Then
                    errorString = "Differs from TVDB"
                End If
            Case "TMDB_ImdbId"
                If Not String.IsNullOrWhiteSpace(TMDB_ImdbId) AndAlso TMDB_ImdbId <> IMDB_ID Then
                    errorString = "Differs from TVDB"
                End If
            Case "IMDB_ID"
                If Not String.IsNullOrWhiteSpace(IMDB_ImdbId) AndAlso Not IMDB_ImdbId.Equals(IMDB_ID) Then
                    AddError("IMDB_ImdbId", "Differs from TVDB")
                Else
                    ClearError("IMDB_ImdbId")
                End If
                If Not String.IsNullOrWhiteSpace(TMDB_ImdbId) AndAlso Not TMDB_ImdbId.Equals(IMDB_ID) Then
                    AddError("TMDB_ImdbId", "Differs from TVDB")
                Else
                    ClearError("TMDB_ImdbId")
                End If

            Case "TMDB_ProductionCode"
                If Not String.IsNullOrWhiteSpace(TMDB_ProductionCode) AndAlso TMDB_ProductionCode <> ProductionCode Then
                    errorString = "Differs from TVDB"
                End If
            Case "ProductionCode"
                If Not String.IsNullOrWhiteSpace(TMDB_ProductionCode) AndAlso Not TMDB_ProductionCode.Equals(ProductionCode) Then
                    AddError("TMDB_ProductionCode", "Differs from TVDB")
                Else
                    ClearError("TMDB_ProductionCode")
                End If
        End Select

        If String.IsNullOrEmpty(errorString) Then
            ClearError(propertyName)
        Else
            AddError(propertyName, errorString)
        End If

    End Sub

    Public Sub Validate()
        Validate("EpisodeName")
        Validate("FirstAired")
        Validate("Overview")
        Validate("IMDB_ID")
        Validate("ProductionCode")
    End Sub

End Class

'System.Diagnostics.DebuggerStepThroughAttribute(), _
<CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1"),
 Serializable(),
 DesignerCategory("code"),
 XmlType(AnonymousType:=True)>
Partial Public Class Series
    Inherits Object
    Implements INotifyPropertyChanged

#Region " Fields "

    Private idField As String

    'Private actorsField As String

    'Private airs_DayOfWeekField As String

    'Private airs_TimeField As String

    Private contentRatingField As String

    Private firstAiredField As String

    'Private genreField As String

    Private iMDB_IDField As String

    Private languageField As String

    Private networkField As String

    'Private networkIDField As String

    Private overviewField As String

    'Private ratingField As String

    'Private ratingCountField As String

    Private runtimeField As String

    Private seriesIDField As String

    Private seriesNameField As String

    Private statusField As String

    'Private addedField As String

    'Private addedByField As String

    'Private bannerField As String

    'Private fanartField As String

    'Private lastupdatedField As String

    'Private posterField As String

    'Private zap2it_idField As String

    Private tmdbIdField As Integer?

    Private tvGuideIdField As String

    Private tvRageIdField As Integer?

    Private freebaseMidField As String

#End Region

#Region " Properties "

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property id() As String
        Get
            Return Me.idField
        End Get
        Set(value As String)
            Me.idField = value
            RaisePropertyChanged("id")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Actors() As String
    '    Get
    '        Return Me.actorsField
    '    End Get
    '    Set(value As String)
    '        Me.actorsField = value
    '        RaisePropertyChanged("Actors")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Airs_DayOfWeek() As String
    '    Get
    '        Return Me.airs_DayOfWeekField
    '    End Get
    '    Set(value As String)
    '        Me.airs_DayOfWeekField = value
    '        RaisePropertyChanged("Airs_DayOfWeek")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Airs_Time() As String
    '    Get
    '        Return Me.airs_TimeField
    '    End Get
    '    Set(value As String)
    '        Me.airs_TimeField = value
    '        RaisePropertyChanged("Airs_Time")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property ContentRating() As String
        Get
            Return Me.contentRatingField
        End Get
        Set(value As String)
            Me.contentRatingField = value
            RaisePropertyChanged("ContentRating")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property FirstAired() As String
        Get
            Return Me.firstAiredField
        End Get
        Set(value As String)
            Me.firstAiredField = value
            RaisePropertyChanged("FirstAired")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Genre() As String
    '    Get
    '        Return Me.genreField
    '    End Get
    '    Set(value As String)
    '        Me.genreField = value
    '        RaisePropertyChanged("Genre")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property IMDB_ID() As String
        Get
            Return Me.iMDB_IDField
        End Get
        Set(value As String)
            Me.iMDB_IDField = value
            RaisePropertyChanged("IMDB_ID")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Language() As String
        Get
            Return Me.languageField
        End Get
        Set(value As String)
            Me.languageField = value
            RaisePropertyChanged("Language")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Network() As String
        Get
            Return Me.networkField
        End Get
        Set(value As String)
            Me.networkField = value
            RaisePropertyChanged("Network")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property NetworkID() As String
    '    Get
    '        Return Me.networkIDField
    '    End Get
    '    Set(value As String)
    '        Me.networkIDField = value
    '        RaisePropertyChanged("NetworkID")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Overview() As String
        Get
            Return Me.overviewField
        End Get
        Set(value As String)
            Me.overviewField = value.Trim()
            RaisePropertyChanged("Overview")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property Rating() As String
    '    Get
    '        Return Me.ratingField
    '    End Get
    '    Set(value As String)
    '        Me.ratingField = value
    '        RaisePropertyChanged("Rating")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property RatingCount() As String
    '    Get
    '        Return Me.ratingCountField
    '    End Get
    '    Set(value As String)
    '        Me.ratingCountField = value
    '        RaisePropertyChanged("RatingCount")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Runtime() As String
        Get
            Return Me.runtimeField
        End Get
        Set(value As String)
            Me.runtimeField = value
            RaisePropertyChanged("Runtime")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property SeriesID() As String
        Get
            Return Me.seriesIDField
        End Get
        Set(value As String)
            Me.seriesIDField = value
            RaisePropertyChanged("SeriesID")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property SeriesName() As String
        Get
            Return Me.seriesNameField
        End Get
        Set(value As String)
            Me.seriesNameField = value
            RaisePropertyChanged("SeriesName")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property Status() As String
        Get
            Return Me.statusField
        End Get
        Set(value As String)
            Me.statusField = value
            RaisePropertyChanged("Status")
        End Set
    End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property added() As String
    '    Get
    '        Return Me.addedField
    '    End Get
    '    Set(value As String)
    '        Me.addedField = value
    '        RaisePropertyChanged("added")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property addedBy() As String
    '    Get
    '        Return Me.addedByField
    '    End Get
    '    Set(value As String)
    '        Me.addedByField = value
    '        RaisePropertyChanged("addedBy")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property banner() As String
    '    Get
    '        Return Me.bannerField
    '    End Get
    '    Set(value As String)
    '        Me.bannerField = value
    '        RaisePropertyChanged("banner")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property fanart() As String
    '    Get
    '        Return Me.fanartField
    '    End Get
    '    Set(value As String)
    '        Me.fanartField = value
    '        RaisePropertyChanged("fanart")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property lastupdated() As String
    '    Get
    '        Return Me.lastupdatedField
    '    End Get
    '    Set(value As String)
    '        Me.lastupdatedField = value
    '        RaisePropertyChanged("lastupdated")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property poster() As String
    '    Get
    '        Return Me.posterField
    '    End Get
    '    Set(value As String)
    '        Me.posterField = value
    '        RaisePropertyChanged("poster")
    '    End Set
    'End Property

    '<XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)> _
    'Public Property zap2it_id() As String
    '    Get
    '        Return Me.zap2it_idField
    '    End Get
    '    Set(value As String)
    '        Me.zap2it_idField = value
    '        RaisePropertyChanged("zap2it_id")
    '    End Set
    'End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Public Property TmdbId() As Integer?
        Get
            Return Me.tmdbIdField
        End Get
        Set(value As Integer?)
            Me.tmdbIdField = value
            RaisePropertyChanged("TmdbId")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property TvGuideId As String
        Get
            Return tvGuideIdField
        End Get
        Set(value As String)
            tvGuideIdField = value
            RaisePropertyChanged("TvGuideId")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property TvRageId As Integer?
        Get
            Return tvRageIdField
        End Get
        Set(value As Integer?)
            tvRageIdField = value
            RaisePropertyChanged("TvRageId")
        End Set
    End Property

    <XmlElement(Form:=Xml.Schema.XmlSchemaForm.Unqualified)>
    Property FreebaseMid As String
        Get
            Return freebaseMidField
        End Get
        Set(value As String)
            If Not value = Nothing Then
                value = value.Trim()
            End If
            freebaseMidField = value
            RaisePropertyChanged("FreebaseMid")
        End Set
    End Property

#End Region

#Region " INotifyPropertyChanged Members "

    <NonSerialized>
    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
        If (Not (propertyChanged) Is Nothing) Then
            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End If
    End Sub

#End Region

    Public Function Copy() As Series
        Using ms = New MemoryStream()
            Dim formatter = New System.Runtime.Serialization.Formatters.Binary.BinaryFormatter()
            formatter.Serialize(ms, Me)
            ms.Position = 0
            Return DirectCast(formatter.Deserialize(ms), Series)
        End Using
    End Function

End Class